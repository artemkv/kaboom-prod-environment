AWSTemplateFormatVersion: 2010-09-09

Description: Kaboom environment

Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
#  SSLCertificate:
#    Description: The ARN of the certificate for the Load Balancer
#    Type: 'String'

Resources:

  # Create a VPC

  # A VPC is an isolated portion of the AWS cloud populated by AWS objects, such as Amazon EC2 instances.
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Attach an Internet gateway to the VPC

  # Creates a new Internet gateway in your AWS account. After creating the Internet gateway, you then attach it to a VPC.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Attaches a gateway to a VPC.
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create public subnets - to put the load balancer into

  # A network subnet within the VPC.
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-3a
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # A network subnet within the VPC.
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: eu-west-3b
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Route the traffic from public subnets to the Internet gateway

  # Creates a new route table within a VPC.
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'

  # Creates a new route in a route table within a VPC.
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associates a subnet with a route table.
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic

  # Associates a subnet with a route table.
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic

  # Create private subnets - for our instances

  # A network subnet within the VPC.
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-3a
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # A network subnet within the VPC.
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-3b
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # ACL for public and private networks

  # Creates a new network ACL in a VPC.
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: Public

  # Creates a new network ACL in a VPC.
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: Private

  # Associates a subnet with a network ACL.
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  # Associates a subnet with a network ACL.
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  # Associates a subnet with a network ACL.
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic

  # Associates a subnet with a network ACL.
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic

  # Rules for private subnets

  # Creates a rule in a network ACL.
  InboundSSHPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0' # TODO: should be a bastion host
      PortRange:
        From: 22
        To: 22

  # Creates a rule in a network ACL.
  InboundEventsServicePrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 101
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 8600
        To: 8600

  # Creates a rule in a network ACL.
  InboundWebServicePrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 102
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 8700
        To: 8700

  # Creates a rule in a network ACL.
  OutboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true # Outbound traffic
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535

  # Rules for public subnets

  # Creates a rule in a network ACL.
  InboundEventsServicePublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 101
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 8600
        To: 8600

  # Creates a rule in a network ACL.
  InboundWebServicePublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 102
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 8700
        To: 8700

  # Creates a rule in a network ACL.
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true # Outbound traffic
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535

  # Create EC2 instances in a security group

  # A security group is a set of firewall rules that control the traffic for your instance.
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22 + web access
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # ! Everyone can access! Careful! Better idea would be to use bastion host.
        - IpProtocol: tcp
          FromPort: '8600' # events service
          ToPort: '8600'
          SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup # ELB
        - IpProtocol: tcp
          FromPort: '8700' # web service
          ToPort: '8700'
          SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup # ELB

  EC2Instance1:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-05d0ea3220b4d2ac4 # TODO: for now hardcoded
        InstanceType: t2.micro # TODO: for now hardcoded
        SubnetId: !Ref SubnetAPrivate
        KeyName: !Ref KeyName
        SecurityGroupIds: # Since we are using VPC, we need to use SecurityGroupIds and not SecurityGroups
          - !Ref EC2SecurityGroup
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: Server-1

  EC2Instance2:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-05d0ea3220b4d2ac4 # TODO: for now hardcoded
        InstanceType: t2.micro # TODO: for now hardcoded
        SubnetId: !Ref SubnetBPrivate
        KeyName: !Ref KeyName
        SecurityGroupIds: # Since we are using VPC, we need to use SecurityGroupIds and not SecurityGroups
          - !Ref EC2SecurityGroup
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: Server-2

  # Create load balancer in a security group

  # A security group is a set of firewall rules that control the traffic for your instance.
  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Public ELB Security Group with HTTP access on ports 8600, 8700 from the internet
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8600' # events service
          ToPort: '8600'
          CidrIp: 0.0.0.0/0 # Everyone
        - IpProtocol: tcp
          FromPort: '8700' # web service
          ToPort: '8700'
          CidrIp: 0.0.0.0/0 # Everyone

  # Creates a LoadBalancer
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetAPublic
        - !Ref SubnetBPublic
      SecurityGroups:
        - Ref: PublicLoadBalancerSecurityGroup
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # A listener for an Application Load Balancer
  EventsServiceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: EventsServiceTargetGroup
      LoadBalancerArn:
        Ref: MyLoadBalancer
      Port: '8600'
      Protocol: HTTP # TODO: use HTTPS
      # Certificates:
      #  - CertificateArn: !Ref SSLCertificate

  # A listener for an Application Load Balancer
  WebServiceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebServiceTargetGroup
      LoadBalancerArn:
        Ref: MyLoadBalancer
      Port: '8700'
      Protocol: HTTP # TODO: use HTTPS
      # Certificates:
      #  - CertificateArn: !Ref SSLCertificate

  # Routes requests to one or more registered targets.
  EventsServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      Port: 8600
      Protocol: HTTP
      Targets:
      - Id:
          Ref: EC2Instance1
        Port: 8600
      - Id:
          Ref: EC2Instance2
        Port: 8600
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Routes requests to one or more registered targets.
  WebServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      Port: 8700
      Protocol: HTTP
      Targets:
      - Id:
          Ref: EC2Instance1
        Port: 8700
      - Id:
          Ref: EC2Instance2
        Port: 8700
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Creates a hosted zone
  ApiKaboomReportCom: 
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig:
        Comment: My hosted zone for api.kaboom-report.com
      Name: api.kaboom-report.com

  # DNS record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref ApiKaboomReportCom
      Comment: DNS name for app services.
      Name: api.kaboom-report.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyLoadBalancer.DNSName
        HostedZoneId: !GetAtt MyLoadBalancer.CanonicalHostedZoneID